/* bestpay.h
   Generated by wsdl2h 2.8.14 from bestpay.wsdl and typemap.dat
   2013-05-16 06:44:32 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on bestpay.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://127.0.0.1:8081/bppf_inf/services/DealProcessor                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DealProcessorSoapBinding 
//gsoap ns1  service type:	DealProcessorServiceImpl 
//gsoap ns1  service port:	http://183.63.191.42:8081/bppf_inf/services/DealProcessor 
//gsoap ns1  service namespace:	http://impl.websvc 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref DealProcessorSoapBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DealProcessorSoapBinding Binding "DealProcessorSoapBinding"

@section DealProcessorSoapBinding_operations Operations of Binding  "DealProcessorSoapBinding"

  - @ref ns1__dispatchCommand

  - @ref ns1__dispatchCommandIPOS

  - @ref ns1__dispatchCommandEXT

@section DealProcessorSoapBinding_ports Endpoints of Binding  "DealProcessorSoapBinding"

  - http://183.63.191.42:8081/bppf_inf/services/DealProcessor

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DealProcessorSoapBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__dispatchCommand                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__dispatchCommand" of service binding "DealProcessorSoapBinding"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__dispatchCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__dispatchCommand(
    struct soap *soap,
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandReturn
  );
@endcode

C++ proxy class (defined in soapDealProcessorSoapBindingProxy.h):
@code
  class DealProcessorSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDealProcessorSoapBindingService.h):
@code
  class DealProcessorSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dispatchCommand SOAP
//gsoap ns1  service method-style:	dispatchCommand rpc
//gsoap ns1  service method-encoding:	dispatchCommand http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	dispatchCommand ""
//gsoap ns1  service method-output-action:	dispatchCommand Response
int ns1__dispatchCommand(
    std::string                         _in0,	///< Input parameter
    std::string                         _in1,	///< Input parameter
    std::string                        &_dispatchCommandReturn	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__dispatchCommandIPOS                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__dispatchCommandIPOS" of service binding "DealProcessorSoapBinding"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__dispatchCommandIPOS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandIPOSReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__dispatchCommandIPOS(
    struct soap *soap,
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandIPOSReturn
  );
@endcode

C++ proxy class (defined in soapDealProcessorSoapBindingProxy.h):
@code
  class DealProcessorSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDealProcessorSoapBindingService.h):
@code
  class DealProcessorSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dispatchCommandIPOS SOAP
//gsoap ns1  service method-style:	dispatchCommandIPOS rpc
//gsoap ns1  service method-encoding:	dispatchCommandIPOS http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	dispatchCommandIPOS ""
//gsoap ns1  service method-output-action:	dispatchCommandIPOS Response
int ns1__dispatchCommandIPOS(
    std::string                         _in0,	///< Input parameter
    std::string                         _in1,	///< Input parameter
    std::string                        &_dispatchCommandIPOSReturn	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__dispatchCommandEXT                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__dispatchCommandEXT" of service binding "DealProcessorSoapBinding"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__dispatchCommandEXT(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandEXTReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__dispatchCommandEXT(
    struct soap *soap,
    // input parameters:
    std::string                         in0,
    std::string                         in1,
    // output parameters:
    std::string                        &_dispatchCommandEXTReturn
  );
@endcode

C++ proxy class (defined in soapDealProcessorSoapBindingProxy.h):
@code
  class DealProcessorSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDealProcessorSoapBindingService.h):
@code
  class DealProcessorSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dispatchCommandEXT SOAP
//gsoap ns1  service method-style:	dispatchCommandEXT rpc
//gsoap ns1  service method-encoding:	dispatchCommandEXT http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	dispatchCommandEXT ""
//gsoap ns1  service method-output-action:	dispatchCommandEXT Response
int ns1__dispatchCommandEXT(
    std::string                         _in0,	///< Input parameter
    std::string                         _in1,	///< Input parameter
    std::string                        &_dispatchCommandEXTReturn	///< Output parameter
);

/**

@page DealProcessorSoapBinding Binding "DealProcessorSoapBinding"

@section DealProcessorSoapBinding_policy_enablers Policy Enablers of Binding  "DealProcessorSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/* End of bestpay.h */
