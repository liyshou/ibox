/* soapClient.cpp
   Generated by gSOAP 2.8.14 from bestpay.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.14 2013-05-16 06:44:52 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__dispatchCommand(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, std::string _in1, std::string &_dispatchCommandReturn)
{	struct ns1__dispatchCommand soap_tmp_ns1__dispatchCommand;
	struct ns1__dispatchCommandResponse *soap_tmp_ns1__dispatchCommandResponse;
	if (soap_endpoint == NULL)
	
	//	soap_endpoint = "http://183.63.191.42:8081/bppf_inf/services/DealProcessor";
	//	soap_endpoint = "http://172.26.3.8:8081/bppf_inf/services/DealProcessor"; //42环境
		soap_endpoint = "http://172.26.8.5:8081/bppf_inf/services/DealProcessor"; //46环境 
	//	soap_endpoint = "http://172.25.132.19:8081/bppf_inf/services/DealProcessor"; //44环境
	//	soap_endpoint = "http://192.168.87.4:8081/bppf_inf/services/DealProcessor"; //development environment
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__dispatchCommand._in0 = _in0;
	soap_tmp_ns1__dispatchCommand._in1 = _in1;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__dispatchCommand(soap, &soap_tmp_ns1__dispatchCommand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__dispatchCommand(soap, &soap_tmp_ns1__dispatchCommand, "ns1:dispatchCommand", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__dispatchCommand(soap, &soap_tmp_ns1__dispatchCommand, "ns1:dispatchCommand", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_dispatchCommandReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_dispatchCommandReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__dispatchCommandResponse = soap_get_ns1__dispatchCommandResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_dispatchCommandReturn = soap_tmp_ns1__dispatchCommandResponse->_dispatchCommandReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__dispatchCommandIPOS(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, std::string _in1, std::string &_dispatchCommandIPOSReturn)
{	struct ns1__dispatchCommandIPOS soap_tmp_ns1__dispatchCommandIPOS;
	struct ns1__dispatchCommandIPOSResponse *soap_tmp_ns1__dispatchCommandIPOSResponse;
	if (soap_endpoint == NULL)
	//	soap_endpoint = "http://183.63.191.42:8081/bppf_inf/services/DealProcessor";
	//	soap_endpoint = "http://172.26.3.8:8081/bppf_inf/services/DealProcessor"; //42环境 
		soap_endpoint = "http://172.26.8.5:8081/bppf_inf/services/DealProcessor"; //46环境 
	//	soap_endpoint = "http://172.25.132.19:8081/bppf_inf/services/DealProcessor"; //44环境
	//	soap_endpoint = "http://192.168.87.4:8081/bppf_inf/services/DealProcessor"; //development environment

	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__dispatchCommandIPOS._in0 = _in0;
	soap_tmp_ns1__dispatchCommandIPOS._in1 = _in1;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__dispatchCommandIPOS(soap, &soap_tmp_ns1__dispatchCommandIPOS);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__dispatchCommandIPOS(soap, &soap_tmp_ns1__dispatchCommandIPOS, "ns1:dispatchCommandIPOS", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__dispatchCommandIPOS(soap, &soap_tmp_ns1__dispatchCommandIPOS, "ns1:dispatchCommandIPOS", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_dispatchCommandIPOSReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_dispatchCommandIPOSReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__dispatchCommandIPOSResponse = soap_get_ns1__dispatchCommandIPOSResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_dispatchCommandIPOSReturn = soap_tmp_ns1__dispatchCommandIPOSResponse->_dispatchCommandIPOSReturn;
	return soap_closesock(soap);
}


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__dispatchCommandEXT(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, std::string _in1, std::string &_dispatchCommandEXTReturn)
{	struct ns1__dispatchCommandEXT soap_tmp_ns1__dispatchCommandEXT;
	struct ns1__dispatchCommandEXTResponse *soap_tmp_ns1__dispatchCommandEXTResponse;
	if (soap_endpoint == NULL)
	//	soap_endpoint = "http://183.63.191.42:8081/bppf_inf/services/DealProcessor";
		//soap_endpoint = "http://172.26.3.8:8081/bppf_inf/services/DealProcessor"; //42环境
		soap_endpoint = "http://172.26.8.5:8081/bppf_inf/services/DealProcessor"; //46环境 
	//	soap_endpoint = "http://172.25.132.19:8081/bppf_inf/services/DealProcessor"; //44环境
	//	soap_endpoint = "http://192.168.87.4:8081/bppf_inf/services/DealProcessor"; //development environment

	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__dispatchCommandEXT._in0 = _in0;
	soap_tmp_ns1__dispatchCommandEXT._in1 = _in1;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__dispatchCommandEXT(soap, &soap_tmp_ns1__dispatchCommandEXT);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__dispatchCommandEXT(soap, &soap_tmp_ns1__dispatchCommandEXT, "ns1:dispatchCommandEXT", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__dispatchCommandEXT(soap, &soap_tmp_ns1__dispatchCommandEXT, "ns1:dispatchCommandEXT", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_dispatchCommandEXTReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_dispatchCommandEXTReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__dispatchCommandEXTResponse = soap_get_ns1__dispatchCommandEXTResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_dispatchCommandEXTReturn = soap_tmp_ns1__dispatchCommandEXTResponse->_dispatchCommandEXTReturn;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
